import pandas as pd
import os

# Paths
data_path = '/Users/faridabdurrahman/Desktop/leadgenanalysis/processed/full_merged_dataset.csv'
output_dir = '/Users/faridabdurrahman/Desktop/leadgenanalysis/processed'

# Ensure output directory exists
os.makedirs(output_dir, exist_ok=True)

# Load the merged dataset for analysis
df = pd.read_csv(data_path)

# Start of EDA
print(" Dataset Overview:")
print(df.info())
print(df.head())

# 1. Number of leads per source channel
leads_by_channel = df['source_channel'].value_counts()
leads_by_channel.to_csv(os.path.join(output_dir, 'leads_by_channel.csv'))
print("\n Leads by Source Channel:")
print(leads_by_channel)

# 2. Conversion rate per channel
conversion_by_channel = df.groupby('source_channel')['converted'].mean().sort_values(ascending=False)
conversion_by_channel.to_csv(os.path.join(output_dir, 'conversion_rate_by_channel.csv'))
print("\n Conversion Rate by Source Channel:")
print(conversion_by_channel)

# 3. Distribution of lead quality scores
lead_quality_stats = df['lead_quality_score'].describe()
lead_quality_stats.to_csv(os.path.join(output_dir, 'lead_quality_score_distribution.csv'))
print("\n Lead Quality Score Distribution:")
print(lead_quality_stats)

# 4. Correlation between lead quality and conversion
correlation = df[['lead_quality_score', 'converted']].corr()
correlation.to_csv(os.path.join(output_dir, 'lead_quality_vs_conversion.csv'))
print("\n Correlation Between Lead Quality and Conversion:")
print(correlation)

# 5. Top performing campaigns by number of conversions
top_campaigns = df[df['converted'] == 1]['campaign_id'].value_counts().head(10)
top_campaigns.to_csv(os.path.join(output_dir, 'top_performing_campaigns.csv'))
print("\n Top Performing Campaigns:")
print(top_campaigns)

# 6. Device type performance (only for converted leads)
device_conversion = df[df['converted'] == 1]['device_type'].value_counts()
device_conversion.to_csv(os.path.join(output_dir, 'device_types_converted.csv'))
print("\n Device Types for Converted Leads:")
print(device_conversion)

# 7. Conversion time trends
if 'conversion_time_days' in df.columns:
    conversion_time_stats = df['conversion_time_days'].describe()
    conversion_time_stats.to_csv(os.path.join(output_dir, 'conversion_time_days_stats.csv'))
    print("\n Conversion Time (Days) Stats:")
    print(conversion_time_stats)

# 8. Revenue generated by sales rep
if 'revenue_generated' in df.columns:
    revenue_by_sales_rep = df.groupby('sales_rep')['revenue_generated'].sum().sort_values(ascending=False)
    revenue_by_sales_rep.to_csv(os.path.join(output_dir, 'revenue_by_sales_rep.csv'))
    print("\n Revenue by Sales Rep:")
    print(revenue_by_sales_rep)

# 9. Time-based patterns
df['created_at'] = pd.to_datetime(df['created_at'], errors='coerce')
df['month'] = df['created_at'].dt.to_period('M')
monthly_leads = df.groupby('month').size()
monthly_leads.to_csv(os.path.join(output_dir, 'monthly_lead_trend.csv'))

print("\n Monthly Lead Trend:")
print(monthly_leads)

print(f"\n All CSV files saved in: {output_dir}")
